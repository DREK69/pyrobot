import os
import cv2
import qrcode
from pyrogram import Client, filters
from MerissaRobot import pbot

@pbot.on_message(filters.command('qr'))
async def qr(c, m):
    if " " in m.text:
        tdl = await m.reply_text("**Plz wi8 Bruh!!**")
        text = str(m.text).split(" ", 1)[1]
        qr = qrcode.QRCode(version=None,
                           error_correction=qrcode.constants.ERROR_CORRECT_L,
                           box_size=10, border=4)
        qr.add_data(text)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        img.save('qr.png')
        try:
            await c.send_photo(m.chat.id, 'qr.png')
        except:
            await c.send_document(m.chat.id, 'qr.png')
        os.remove('qr.png')
    elif m.reply_to_message.text:
        text = m.reply_to_message.text
        qr = qrcode.QRCode(version=None,
                           error_correction=qrcode.constants.ERROR_CORRECT_L,
                           box_size=10, border=4)
        qr.add_data(text)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        img.save('qr.png')
        try:
            await c.send_photo(m.chat.id, 'qr.png')
        except:
            await c.send_document(m.chat.id, 'qr.png')
        os.remove('qr.png')
    elif not m.reply_to_message:
        await m.reply(
            '**Hah! What to do with empty command?\nReply an image to scan or send text along with command to make qr.**')
    elif m.reply_to_message.photo:
        x = await m.reply_text("Processing...")
        try:
            d = cv2.QRCodeDetector()
            qr_code = await m.reply_to_message.download()
            val, p, s = d.detectAndDecode(cv2.imread(qr_code))
            await x.edit(val)
        except:
            await x.edit("Failed to get data")
        os.remove(qr_code)
    else:
        await m.reply('Unsupported!')


@app.on_message(filters.command("readqr"))
async def readqr(c, m):
    if not m.reply_to_message:
        return await m.reply("Please reply photo that contain valid QR Code.")
    if not m.reply_to_message.photo:
        return await m.reply("Please reply photo that contain valid QR Code.")
    foto = await m.reply_to_message.download()
    myfile = {"file": (foto, open(foto, "rb"), "application/octet-stream")}
    url = "http://api.qrserver.com/v1/read-qr-code/"
    r = await postreq(url, myfile)
    os.remove(foto)
    if res := r.json()[0]["symbol"][0]["data"] is None:
        return await m.reply_msg(res)
    await m.reply_msg(
        f"<b>QR Code Reader by @{c.me.username}:</b> <code>{r.json()[0]['symbol'][0]['data']}</code>",
        quote=True,
    )


@app.on_message(filters.command("createqr"))
async def makeqr(c, m):
    if m.reply_to_message and m.reply_to_message.text:
        teks = m.reply_to_message.text
    elif len(m.command) > 1:
        teks = m.text.split(None, 1)[1]
    else:
        return await m.reply(
            "Please add text after command to convert text -> QR Code."
        )
    url = await getreq(f"https://api.princexd.tech/qrcode?text={teks}")
    await m.reply_photo(
        url["url"], caption=f"<b>QR code Generated by @{c.me.username}</b>", quote=True
    )
